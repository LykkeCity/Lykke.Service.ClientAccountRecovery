// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ClientAccountRecovery.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ClientAccountRecoveryServiceClient.
    /// </summary>
    public static partial class ClientAccountRecoveryServiceClientExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IClientAccountRecoveryServiceClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NewRecoveryResponse> StartNewRecoveryAsync(this IClientAccountRecoveryServiceClient operations, NewRecoveryRequest request = default(NewRecoveryRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartNewRecoveryWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryStatusResponse> GetRecoveryStatusAsync(this IClientAccountRecoveryServiceClient operations, string recoveryId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRecoveryStatusWithHttpMessagesAsync(recoveryId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetNextChallengeAsync(this IClientAccountRecoveryServiceClient operations, ChallengeRequest request = default(ChallengeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetNextChallengeWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePasswordAsync(this IClientAccountRecoveryServiceClient operations, PasswordRequest request = default(PasswordRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdatePasswordWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveChallengeAsync(this IClientAccountRecoveryServiceClient operations, ApproveChallengeRequest request = default(ApproveChallengeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveChallengeWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SubmitResolutionAsync(this IClientAccountRecoveryServiceClient operations, ResolutionRequest request = default(ResolutionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SubmitResolutionWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ClientRecoveryHistoryResponse>> GetClientRecoveriesAsync(this IClientAccountRecoveryServiceClient operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClientRecoveriesWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RecoveryTraceResponse>> GetRecoveryTraceAsync(this IClientAccountRecoveryServiceClient operations, string recoveryId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRecoveryTraceWithHttpMessagesAsync(recoveryId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
