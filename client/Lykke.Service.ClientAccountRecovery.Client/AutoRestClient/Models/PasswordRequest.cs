// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ClientAccountRecovery.Client.AutoRestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PasswordRequest
    {
        /// <summary>
        /// Initializes a new instance of the PasswordRequest class.
        /// </summary>
        public PasswordRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PasswordRequest class.
        /// </summary>
        public PasswordRequest(string recoveryId, string passwordHash, string ip, string userAgent)
        {
            RecoveryId = recoveryId;
            PasswordHash = passwordHash;
            Ip = ip;
            UserAgent = userAgent;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recoveryId")]
        public string RecoveryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "passwordHash")]
        public string PasswordHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ip")]
        public string Ip { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userAgent")]
        public string UserAgent { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RecoveryId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RecoveryId");
            }
            if (PasswordHash == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PasswordHash");
            }
            if (Ip == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Ip");
            }
            if (UserAgent == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserAgent");
            }
            if (RecoveryId != null)
            {
                if (RecoveryId.Length < 8)
                {
                    throw new ValidationException(ValidationRules.MinLength, "RecoveryId", 8);
                }
            }
            if (UserAgent != null)
            {
                if (UserAgent.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "UserAgent", 128);
                }
            }
        }
    }
}
