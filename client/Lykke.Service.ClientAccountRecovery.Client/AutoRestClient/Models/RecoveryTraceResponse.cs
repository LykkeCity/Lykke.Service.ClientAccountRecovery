// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ClientAccountRecovery.Client.AutoRestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RecoveryTraceResponse
    {
        /// <summary>
        /// Initializes a new instance of the RecoveryTraceResponse class.
        /// </summary>
        public RecoveryTraceResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryTraceResponse class.
        /// </summary>
        /// <param name="time">A date time of the event</param>
        /// <param name="previousState">A previous state. Possible values
        /// include: 'RecoveryStarted', 'AwaitSecretPhrases',
        /// 'AwaitDeviceVerification', 'AwaitSmsVerification',
        /// 'AwaitEmailVerification', 'AwaitSelfieVerification',
        /// 'SelfieVerificationInProgress', 'AwaitPinCode',
        /// 'PasswordChangeFrozen', 'PasswordChangeSuspended', 'CallSupport',
        /// 'Transfer', 'PasswordChangeAllowed', 'PasswordChangeForbidden',
        /// 'PasswordUpdated'</param>
        /// <param name="action">An action that leaded state changing. Possible
        /// values include: 'RecoveryRequest', 'SecretPhrasesComplete',
        /// 'SecretPhrasesSkip', 'SecretPhrasesVerificationFail',
        /// 'DeviceVerificationComplete', 'DeviceVerificationSkip',
        /// 'DeviceVerificationFail', 'SmsVerificationComplete',
        /// 'SmsVerificationRestart', 'SmsVerificationFail',
        /// 'SmsVerificationSkip', 'EmailVerificationComplete',
        /// 'EmailVerificationRestart', 'EmailVerificationFail',
        /// 'EmailVerificationSkip', 'PinComplete', 'PinSkip', 'PinFail',
        /// 'SelfieVerificationRequest', 'SelfieVerificationComplete',
        /// 'SelfieVerificationSkip', 'SelfieVerificationFail',
        /// 'JumpToSuspended', 'JumpToCallSupport', 'JumpToFrozen',
        /// 'JumpToAllowed', 'JumpToForbidden', 'UpdatePassword',
        /// 'TryUnfreeze'</param>
        /// <param name="newState">A current state. Possible values include:
        /// 'RecoveryStarted', 'AwaitSecretPhrases', 'AwaitDeviceVerification',
        /// 'AwaitSmsVerification', 'AwaitEmailVerification',
        /// 'AwaitSelfieVerification', 'SelfieVerificationInProgress',
        /// 'AwaitPinCode', 'PasswordChangeFrozen', 'PasswordChangeSuspended',
        /// 'CallSupport', 'Transfer', 'PasswordChangeAllowed',
        /// 'PasswordChangeForbidden', 'PasswordUpdated'</param>
        /// <param name="initiator">An initiator of the event</param>
        /// <param name="comment">Comment from the support</param>
        /// <param name="ip">Client's ip</param>
        /// <param name="userAgent">Client's user agent</param>
        public RecoveryTraceResponse(System.DateTime time, State previousState, Trigger action, State newState, string initiator, string comment, string ip, string userAgent)
        {
            Time = time;
            PreviousState = previousState;
            Action = action;
            NewState = newState;
            Initiator = initiator;
            Comment = comment;
            Ip = ip;
            UserAgent = userAgent;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a date time of the event
        /// </summary>
        [JsonProperty(PropertyName = "time")]
        public System.DateTime Time { get; private set; }

        /// <summary>
        /// Gets a previous state. Possible values include: 'RecoveryStarted',
        /// 'AwaitSecretPhrases', 'AwaitDeviceVerification',
        /// 'AwaitSmsVerification', 'AwaitEmailVerification',
        /// 'AwaitSelfieVerification', 'SelfieVerificationInProgress',
        /// 'AwaitPinCode', 'PasswordChangeFrozen', 'PasswordChangeSuspended',
        /// 'CallSupport', 'Transfer', 'PasswordChangeAllowed',
        /// 'PasswordChangeForbidden', 'PasswordUpdated'
        /// </summary>
        [JsonProperty(PropertyName = "previousState")]
        public State PreviousState { get; private set; }

        /// <summary>
        /// Gets an action that leaded state changing. Possible values include:
        /// 'RecoveryRequest', 'SecretPhrasesComplete', 'SecretPhrasesSkip',
        /// 'SecretPhrasesVerificationFail', 'DeviceVerificationComplete',
        /// 'DeviceVerificationSkip', 'DeviceVerificationFail',
        /// 'SmsVerificationComplete', 'SmsVerificationRestart',
        /// 'SmsVerificationFail', 'SmsVerificationSkip',
        /// 'EmailVerificationComplete', 'EmailVerificationRestart',
        /// 'EmailVerificationFail', 'EmailVerificationSkip', 'PinComplete',
        /// 'PinSkip', 'PinFail', 'SelfieVerificationRequest',
        /// 'SelfieVerificationComplete', 'SelfieVerificationSkip',
        /// 'SelfieVerificationFail', 'JumpToSuspended', 'JumpToCallSupport',
        /// 'JumpToFrozen', 'JumpToAllowed', 'JumpToForbidden',
        /// 'UpdatePassword', 'TryUnfreeze'
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public Trigger Action { get; private set; }

        /// <summary>
        /// Gets a current state. Possible values include: 'RecoveryStarted',
        /// 'AwaitSecretPhrases', 'AwaitDeviceVerification',
        /// 'AwaitSmsVerification', 'AwaitEmailVerification',
        /// 'AwaitSelfieVerification', 'SelfieVerificationInProgress',
        /// 'AwaitPinCode', 'PasswordChangeFrozen', 'PasswordChangeSuspended',
        /// 'CallSupport', 'Transfer', 'PasswordChangeAllowed',
        /// 'PasswordChangeForbidden', 'PasswordUpdated'
        /// </summary>
        [JsonProperty(PropertyName = "newState")]
        public State NewState { get; private set; }

        /// <summary>
        /// Gets an initiator of the event
        /// </summary>
        [JsonProperty(PropertyName = "initiator")]
        public string Initiator { get; private set; }

        /// <summary>
        /// Gets comment from the support
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; private set; }

        /// <summary>
        /// Gets client's ip
        /// </summary>
        [JsonProperty(PropertyName = "ip")]
        public string Ip { get; private set; }

        /// <summary>
        /// Gets client's user agent
        /// </summary>
        [JsonProperty(PropertyName = "userAgent")]
        public string UserAgent { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UserAgent != null)
            {
                if (UserAgent.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "UserAgent", 128);
                }
            }
        }
    }
}
