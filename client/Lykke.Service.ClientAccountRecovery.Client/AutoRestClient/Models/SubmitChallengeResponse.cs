// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ClientAccountRecovery.Client.AutoRestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class SubmitChallengeResponse
    {
        /// <summary>
        /// Initializes a new instance of the SubmitChallengeResponse class.
        /// </summary>
        public SubmitChallengeResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubmitChallengeResponse class.
        /// </summary>
        /// <param name="stateToken">JWE token containing current state of
        /// recovery process.</param>
        /// <param name="operationStatus">Status of recovery operation.</param>
        public SubmitChallengeResponse(string stateToken, OperationStatus operationStatus)
        {
            StateToken = stateToken;
            OperationStatus = operationStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets JWE token containing current state of recovery
        /// process.
        /// </summary>
        [JsonProperty(PropertyName = "stateToken")]
        public string StateToken { get; set; }

        /// <summary>
        /// Gets or sets status of recovery operation.
        /// </summary>
        [JsonProperty(PropertyName = "operationStatus")]
        public OperationStatus OperationStatus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StateToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StateToken");
            }
            if (OperationStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperationStatus");
            }
            if (OperationStatus != null)
            {
                OperationStatus.Validate();
            }
        }
    }
}
