// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ClientAccountRecovery.Client.AutoRestClient.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for Resolution.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Resolution
    {
        [EnumMember(Value = "Unknown")]
        Unknown,
        [EnumMember(Value = "Suspend")]
        Suspend,
        [EnumMember(Value = "Interview")]
        Interview,
        [EnumMember(Value = "Freeze")]
        Freeze,
        [EnumMember(Value = "Allow")]
        Allow
    }
    internal static class ResolutionEnumExtension
    {
        internal static string ToSerializedValue(this Resolution? value)
        {
            return value == null ? null : ((Resolution)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this Resolution value)
        {
            switch( value )
            {
                case Resolution.Unknown:
                    return "Unknown";
                case Resolution.Suspend:
                    return "Suspend";
                case Resolution.Interview:
                    return "Interview";
                case Resolution.Freeze:
                    return "Freeze";
                case Resolution.Allow:
                    return "Allow";
            }
            return null;
        }

        internal static Resolution? ParseResolution(this string value)
        {
            switch( value )
            {
                case "Unknown":
                    return Resolution.Unknown;
                case "Suspend":
                    return Resolution.Suspend;
                case "Interview":
                    return Resolution.Interview;
                case "Freeze":
                    return Resolution.Freeze;
                case "Allow":
                    return Resolution.Allow;
            }
            return null;
        }
    }
}
