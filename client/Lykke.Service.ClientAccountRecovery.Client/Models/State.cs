// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ClientAccountRecovery.Client.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for State.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum State
    {
        [EnumMember(Value = "RecoveryStarted")]
        RecoveryStarted,
        [EnumMember(Value = "AwaitSecretPhrases")]
        AwaitSecretPhrases,
        [EnumMember(Value = "AwaitDeviceVerification")]
        AwaitDeviceVerification,
        [EnumMember(Value = "AwaitSmsVerification")]
        AwaitSmsVerification,
        [EnumMember(Value = "AwaitEmailVerification")]
        AwaitEmailVerification,
        [EnumMember(Value = "AwaitKycVerification")]
        AwaitKycVerification,
        [EnumMember(Value = "KycInProgress")]
        KycInProgress,
        [EnumMember(Value = "AwaitPinCode")]
        AwaitPinCode,
        [EnumMember(Value = "PasswordChangeFrozen")]
        PasswordChangeFrozen,
        [EnumMember(Value = "PasswordChangeSuspended")]
        PasswordChangeSuspended,
        [EnumMember(Value = "CallSupport")]
        CallSupport,
        [EnumMember(Value = "Transfer")]
        Transfer,
        [EnumMember(Value = "PasswordChangeAllowed")]
        PasswordChangeAllowed,
        [EnumMember(Value = "PasswordChangeForbidden")]
        PasswordChangeForbidden,
        [EnumMember(Value = "PasswordUpdated")]
        PasswordUpdated
    }
    internal static class StateEnumExtension
    {
        internal static string ToSerializedValue(this State? value)
        {
            return value == null ? null : ((State)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this State value)
        {
            switch( value )
            {
                case State.RecoveryStarted:
                    return "RecoveryStarted";
                case State.AwaitSecretPhrases:
                    return "AwaitSecretPhrases";
                case State.AwaitDeviceVerification:
                    return "AwaitDeviceVerification";
                case State.AwaitSmsVerification:
                    return "AwaitSmsVerification";
                case State.AwaitEmailVerification:
                    return "AwaitEmailVerification";
                case State.AwaitKycVerification:
                    return "AwaitKycVerification";
                case State.KycInProgress:
                    return "KycInProgress";
                case State.AwaitPinCode:
                    return "AwaitPinCode";
                case State.PasswordChangeFrozen:
                    return "PasswordChangeFrozen";
                case State.PasswordChangeSuspended:
                    return "PasswordChangeSuspended";
                case State.CallSupport:
                    return "CallSupport";
                case State.Transfer:
                    return "Transfer";
                case State.PasswordChangeAllowed:
                    return "PasswordChangeAllowed";
                case State.PasswordChangeForbidden:
                    return "PasswordChangeForbidden";
                case State.PasswordUpdated:
                    return "PasswordUpdated";
            }
            return null;
        }

        internal static State? ParseState(this string value)
        {
            switch( value )
            {
                case "RecoveryStarted":
                    return State.RecoveryStarted;
                case "AwaitSecretPhrases":
                    return State.AwaitSecretPhrases;
                case "AwaitDeviceVerification":
                    return State.AwaitDeviceVerification;
                case "AwaitSmsVerification":
                    return State.AwaitSmsVerification;
                case "AwaitEmailVerification":
                    return State.AwaitEmailVerification;
                case "AwaitKycVerification":
                    return State.AwaitKycVerification;
                case "KycInProgress":
                    return State.KycInProgress;
                case "AwaitPinCode":
                    return State.AwaitPinCode;
                case "PasswordChangeFrozen":
                    return State.PasswordChangeFrozen;
                case "PasswordChangeSuspended":
                    return State.PasswordChangeSuspended;
                case "CallSupport":
                    return State.CallSupport;
                case "Transfer":
                    return State.Transfer;
                case "PasswordChangeAllowed":
                    return State.PasswordChangeAllowed;
                case "PasswordChangeForbidden":
                    return State.PasswordChangeForbidden;
                case "PasswordUpdated":
                    return State.PasswordUpdated;
            }
            return null;
        }
    }
}
